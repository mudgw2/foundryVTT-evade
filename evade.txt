// Ensure the game object is available (it should be in Foundry VTT context)
if (typeof game === 'undefined' || !game.user) {
    console.error("Foundry VTT 'game' object not found or user not logged in. This script must be run within an active Foundry VTT session.");
}else{ 
      if(!canvas.tokens.controlled.length){
        //No token selected, send notice and stop
        ui.notifications.warn("You must have an character selected");
      }else{
        //const actor = canvas.tokens.controlled[0].document;
        const actor = canvas.tokens.controlled[0].actor;
        const target = game.user.targets.values().next().value.actor;
        const targetEAC = game.user.targets.values().next().value.actor.system.attributes.eac.value;
        const targetKAC = game.user.targets.values().next().value.actor.system.attributes.kac.value;
        const diceRoll = 0;
        const hasghost = 0;
        const ghosttext = '';
        const expertise_die = '1d4';
        
    if (game.user.targets.size > 0){
      //const actor = canvas.tokens.controlled[0].actor;
      //This is the characters CL not the Targets...
        const CR = 20 + actor.system.details.cl.value;
        const DC = Math.floor(CR);
        let text = DC;
  
        const stealth = actor.system.skills?.ste.mod;
        const tokenName = target.name;
        const itemsArray = canvas.tokens.controlled[0].actor._source.items;

        //const ghost=itemsArray.find(i=>i.name==="Ghost");
        const hasGhost = Number(!!token.actor.items.getName("Ghost"));
      
      (async () => {
        
        const formula = `1d20`;
        let diceRoll = new Roll(formula);   
        await diceRoll.evaluate();
        
       const ModifieddiceRoll = diceRoll.total + stealth + hasGhost;

        //target.setCondition('flat-footed', true);
        const modifiersArray = game.user.targets.values().next().value.actor.system.allModifiers;
        target.setCondition('flat-footed', true);
        const effectArray = modifiersArray.find(i=>i.name === "Flat-Footed");

        if(effectArray){
          //console.log(effectArray);
          console.log(effectArray.parent.system.activeDuration);
          //game.user.targets.values().next().value.actor.system.allModifiers[1].parent.system.activeDuration
          effectArray.parent.system.activeDuration.unit = "round";
          effectArray.parent.system.activeDuration.value = 1;
          
          
        }
       target.setCondition('flat-footed', false);

        
       if (ModifieddiceRoll >= DC) { 
       // Check if the actor already has the Flat-Footed effect
        if (target.system.conditions['flat-footed']) {
          //Target is already flat-footed  
          ui.notifications.info(`${tokenName} is already Flat-Footed.`);
        }else{
          
          const level = canvas.tokens.controlled[0].actor.system.details.level.value;

          if(level >= 3 && level <= 5){
            const expertise_die = '1d8';
          }
          if(level > 5 && level <= 7){
            const expertise_die = '3d8';
          }
          if(level > 7 && level <= 9){
            const expertise_die = '4d8';
          }
          if(level > 9 && level <= 11){
            const expertise_die = '5d8';
          }

          if(hasGhost){
            ghosttext = '<div><small>@UUID[Compendium.sfrpg.class-features.Item.nJxXUlTGdZ7Lc5ms]{Ghost}</small></div>';
            console.log('GHOST TEXT');
          }
          
          text =`<p>@UUID[Compendium.sfrpg.class-features.Item.MBNI94tbMoqizPUk]{Trick Attack (Ex)}</p><div style="background-color: green;color:white;weight:bold;padding:10px;border-radius: 5px;">
          <img src="systems/sfrpg/icons/conditions/flatfooted.webp" style="margin:0;max-width:30px;max-height:30px;padding-right:10px;float:left;" alt="Flat-Footed Condition Icon">STEALTH SUCCESS</div><div>
          ${ghosttext}
          <div style="text-align:center;"><small>Roll:  <a class="inline-result" style="color:black"><i class="fas fa-dice-d20"></i> ${diceRoll.total} + ${stealth} + ${hasGhost} = ${ModifieddiceRoll}</small>
           <p><small><strong>${tokenName} is Flat-Footed</strong></p>
           <p><small><strong>Expertise Die: ${expertise_die}</strong></p>
           </div>
         </div><small style="float:right;text-align:right;width:50%;">Target DC: ${DC}</small>
         <p><small style="float:left;width:50%;">Target EAC: ${targetEAC} KAC: ${targetKAC}</small></p>
         `;
              ChatMessage.create({
                content: text,
              });
          
    const equippedWeapon = actor.items.find(item =>item.type === 'weapon' && item.system.equipped)[0];
        // --- Step 3: Determine the attack ability and construct the attack roll formula ---
        // Starfinder attack rolls typically use STR for melee, DEX for ranged,
        // or a specific ability if the weapon has a special property.
        // This example makes a simplified assumption.
        let attackAbility = 'str'; // Default to Strength
       // if (equippedWeapon.system.properties.includes('finesse')) {
            // Finesse weapons use STR or DEX, whichever is higher for attack
         //   const strMod = actor.system.abilities.str.mod;
         //   const dexMod = actor.system.abilities.dex.mod;
         //   attackAbility = (dexMod > strMod) ? 'dex' : 'str';
        //} else if (equippedWeapon.system.properties.includes('ranged')) {
            attackAbility = 'dex'; // Ranged weapons typically use Dexterity
       // }
        // Add more logic here for specific weapon properties (e.g., thrown, heavy)
        // or if the weapon specifies a different attack ability in its data.
        //console.log(actor.system.abilities[attackAbility].mod);
        //console.log(actor.system.attributes.baseAttackBonus.value);
        const attackBonus = actor.system.abilities[attackAbility].mod + actor.system.attributes.baseAttackBonus.value;
        // You might also add weapon-specific bonuses, feats, etc.
        const attackRollFormula = `1d20 + ${attackBonus}`;
        //console.log(equippedWeapon);
        //const damageParts = equippedWeapon.system.damage.parts[0].formula;
            }          
       	}else{
        // DC CHECK FAIL
        text = `<div style="background-color:red;color:white;weight:bold;padding:10px;border-radius: 5px;">
          <img src="systems/sfrpg/icons/conditions/flatfooted.webp" style="margin:0;max-width:30px;max-height:30px;padding-right:10px;float:left;" alt="Flat-Footed Condition Icon">STEALTH FAIL</div><div>
          
          <p><small><strong>${tokenName} Ignores the Stealth attempt.</strong></p><p>Roll:  <a class="inline-result" style="color:black"><i class="fas fa-dice-d20"></i> ${diceRoll.total} + ${stealth} + ${hasGhost} = ${ModifieddiceRoll}</small></p>
          <small style="float:right;text-align:right;width:50%;">Target DC: ${DC}</small>
          </div>`;
           ChatMessage.create({
                content: text
            });
        }   

})();// Async Roll
        
    }//targetedTokens.size
}//!actor
//canvas.tokens.releaseAll();
}//object check
